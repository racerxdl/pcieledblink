// pcie2ram_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module pcie2ram_mm_interconnect_0 (
		input  wire         clk_125_clk_clk,                                //                              clk_125_clk.clk
		input  wire         pcie_hip_coreclkout_clk,                        //                      pcie_hip_coreclkout.clk
		input  wire         pcie_ram_reset1_reset_bridge_in_reset_reset,    //    pcie_ram_reset1_reset_bridge_in_reset.reset
		input  wire         sysid_qsys_0_reset_reset_bridge_in_reset_reset, // sysid_qsys_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  pcie_hip_Rxm_BAR0_address,                      //                        pcie_hip_Rxm_BAR0.address
		output wire         pcie_hip_Rxm_BAR0_waitrequest,                  //                                         .waitrequest
		input  wire [6:0]   pcie_hip_Rxm_BAR0_burstcount,                   //                                         .burstcount
		input  wire [7:0]   pcie_hip_Rxm_BAR0_byteenable,                   //                                         .byteenable
		input  wire         pcie_hip_Rxm_BAR0_read,                         //                                         .read
		output wire [63:0]  pcie_hip_Rxm_BAR0_readdata,                     //                                         .readdata
		output wire         pcie_hip_Rxm_BAR0_readdatavalid,                //                                         .readdatavalid
		input  wire         pcie_hip_Rxm_BAR0_write,                        //                                         .write
		input  wire [63:0]  pcie_hip_Rxm_BAR0_writedata,                    //                                         .writedata
		output wire [10:0]  pcie_ram_s1_address,                            //                              pcie_ram_s1.address
		output wire         pcie_ram_s1_write,                              //                                         .write
		input  wire [127:0] pcie_ram_s1_readdata,                           //                                         .readdata
		output wire [127:0] pcie_ram_s1_writedata,                          //                                         .writedata
		output wire [15:0]  pcie_ram_s1_byteenable,                         //                                         .byteenable
		output wire         pcie_ram_s1_chipselect,                         //                                         .chipselect
		output wire         pcie_ram_s1_clken,                              //                                         .clken
		output wire [0:0]   sysid_qsys_0_control_slave_address,             //               sysid_qsys_0_control_slave.address
		input  wire [31:0]  sysid_qsys_0_control_slave_readdata             //                                         .readdata
	);

	wire          pcie_hip_rxm_bar0_translator_avalon_universal_master_0_waitrequest;   // pcie_hip_Rxm_BAR0_agent:av_waitrequest -> pcie_hip_Rxm_BAR0_translator:uav_waitrequest
	wire   [63:0] pcie_hip_rxm_bar0_translator_avalon_universal_master_0_readdata;      // pcie_hip_Rxm_BAR0_agent:av_readdata -> pcie_hip_Rxm_BAR0_translator:uav_readdata
	wire          pcie_hip_rxm_bar0_translator_avalon_universal_master_0_debugaccess;   // pcie_hip_Rxm_BAR0_translator:uav_debugaccess -> pcie_hip_Rxm_BAR0_agent:av_debugaccess
	wire   [31:0] pcie_hip_rxm_bar0_translator_avalon_universal_master_0_address;       // pcie_hip_Rxm_BAR0_translator:uav_address -> pcie_hip_Rxm_BAR0_agent:av_address
	wire          pcie_hip_rxm_bar0_translator_avalon_universal_master_0_read;          // pcie_hip_Rxm_BAR0_translator:uav_read -> pcie_hip_Rxm_BAR0_agent:av_read
	wire    [7:0] pcie_hip_rxm_bar0_translator_avalon_universal_master_0_byteenable;    // pcie_hip_Rxm_BAR0_translator:uav_byteenable -> pcie_hip_Rxm_BAR0_agent:av_byteenable
	wire          pcie_hip_rxm_bar0_translator_avalon_universal_master_0_readdatavalid; // pcie_hip_Rxm_BAR0_agent:av_readdatavalid -> pcie_hip_Rxm_BAR0_translator:uav_readdatavalid
	wire          pcie_hip_rxm_bar0_translator_avalon_universal_master_0_lock;          // pcie_hip_Rxm_BAR0_translator:uav_lock -> pcie_hip_Rxm_BAR0_agent:av_lock
	wire          pcie_hip_rxm_bar0_translator_avalon_universal_master_0_write;         // pcie_hip_Rxm_BAR0_translator:uav_write -> pcie_hip_Rxm_BAR0_agent:av_write
	wire   [63:0] pcie_hip_rxm_bar0_translator_avalon_universal_master_0_writedata;     // pcie_hip_Rxm_BAR0_translator:uav_writedata -> pcie_hip_Rxm_BAR0_agent:av_writedata
	wire    [9:0] pcie_hip_rxm_bar0_translator_avalon_universal_master_0_burstcount;    // pcie_hip_Rxm_BAR0_translator:uav_burstcount -> pcie_hip_Rxm_BAR0_agent:av_burstcount
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                         // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                      // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                      // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_address;                          // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                       // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                             // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                    // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                             // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                        // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                            // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                       // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                     // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [109:0] sysid_qsys_0_control_slave_agent_rf_source_data;                      // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                     // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;             // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;               // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                  // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [109:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                   // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                  // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;            // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                 // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                // sysid_qsys_0_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire  [127:0] pcie_ram_s1_agent_m0_readdata;                                        // pcie_ram_s1_translator:uav_readdata -> pcie_ram_s1_agent:m0_readdata
	wire          pcie_ram_s1_agent_m0_waitrequest;                                     // pcie_ram_s1_translator:uav_waitrequest -> pcie_ram_s1_agent:m0_waitrequest
	wire          pcie_ram_s1_agent_m0_debugaccess;                                     // pcie_ram_s1_agent:m0_debugaccess -> pcie_ram_s1_translator:uav_debugaccess
	wire   [31:0] pcie_ram_s1_agent_m0_address;                                         // pcie_ram_s1_agent:m0_address -> pcie_ram_s1_translator:uav_address
	wire   [15:0] pcie_ram_s1_agent_m0_byteenable;                                      // pcie_ram_s1_agent:m0_byteenable -> pcie_ram_s1_translator:uav_byteenable
	wire          pcie_ram_s1_agent_m0_read;                                            // pcie_ram_s1_agent:m0_read -> pcie_ram_s1_translator:uav_read
	wire          pcie_ram_s1_agent_m0_readdatavalid;                                   // pcie_ram_s1_translator:uav_readdatavalid -> pcie_ram_s1_agent:m0_readdatavalid
	wire          pcie_ram_s1_agent_m0_lock;                                            // pcie_ram_s1_agent:m0_lock -> pcie_ram_s1_translator:uav_lock
	wire  [127:0] pcie_ram_s1_agent_m0_writedata;                                       // pcie_ram_s1_agent:m0_writedata -> pcie_ram_s1_translator:uav_writedata
	wire          pcie_ram_s1_agent_m0_write;                                           // pcie_ram_s1_agent:m0_write -> pcie_ram_s1_translator:uav_write
	wire    [4:0] pcie_ram_s1_agent_m0_burstcount;                                      // pcie_ram_s1_agent:m0_burstcount -> pcie_ram_s1_translator:uav_burstcount
	wire          pcie_ram_s1_agent_rf_source_valid;                                    // pcie_ram_s1_agent:rf_source_valid -> pcie_ram_s1_agent_rsp_fifo:in_valid
	wire  [217:0] pcie_ram_s1_agent_rf_source_data;                                     // pcie_ram_s1_agent:rf_source_data -> pcie_ram_s1_agent_rsp_fifo:in_data
	wire          pcie_ram_s1_agent_rf_source_ready;                                    // pcie_ram_s1_agent_rsp_fifo:in_ready -> pcie_ram_s1_agent:rf_source_ready
	wire          pcie_ram_s1_agent_rf_source_startofpacket;                            // pcie_ram_s1_agent:rf_source_startofpacket -> pcie_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          pcie_ram_s1_agent_rf_source_endofpacket;                              // pcie_ram_s1_agent:rf_source_endofpacket -> pcie_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          pcie_ram_s1_agent_rsp_fifo_out_valid;                                 // pcie_ram_s1_agent_rsp_fifo:out_valid -> pcie_ram_s1_agent:rf_sink_valid
	wire  [217:0] pcie_ram_s1_agent_rsp_fifo_out_data;                                  // pcie_ram_s1_agent_rsp_fifo:out_data -> pcie_ram_s1_agent:rf_sink_data
	wire          pcie_ram_s1_agent_rsp_fifo_out_ready;                                 // pcie_ram_s1_agent:rf_sink_ready -> pcie_ram_s1_agent_rsp_fifo:out_ready
	wire          pcie_ram_s1_agent_rsp_fifo_out_startofpacket;                         // pcie_ram_s1_agent_rsp_fifo:out_startofpacket -> pcie_ram_s1_agent:rf_sink_startofpacket
	wire          pcie_ram_s1_agent_rsp_fifo_out_endofpacket;                           // pcie_ram_s1_agent_rsp_fifo:out_endofpacket -> pcie_ram_s1_agent:rf_sink_endofpacket
	wire          pcie_ram_s1_agent_rdata_fifo_src_valid;                               // pcie_ram_s1_agent:rdata_fifo_src_valid -> pcie_ram_s1_agent_rdata_fifo:in_valid
	wire  [129:0] pcie_ram_s1_agent_rdata_fifo_src_data;                                // pcie_ram_s1_agent:rdata_fifo_src_data -> pcie_ram_s1_agent_rdata_fifo:in_data
	wire          pcie_ram_s1_agent_rdata_fifo_src_ready;                               // pcie_ram_s1_agent_rdata_fifo:in_ready -> pcie_ram_s1_agent:rdata_fifo_src_ready
	wire          pcie_hip_rxm_bar0_agent_cp_valid;                                     // pcie_hip_Rxm_BAR0_agent:cp_valid -> router:sink_valid
	wire  [144:0] pcie_hip_rxm_bar0_agent_cp_data;                                      // pcie_hip_Rxm_BAR0_agent:cp_data -> router:sink_data
	wire          pcie_hip_rxm_bar0_agent_cp_ready;                                     // router:sink_ready -> pcie_hip_Rxm_BAR0_agent:cp_ready
	wire          pcie_hip_rxm_bar0_agent_cp_startofpacket;                             // pcie_hip_Rxm_BAR0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pcie_hip_rxm_bar0_agent_cp_endofpacket;                               // pcie_hip_Rxm_BAR0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                            // sysid_qsys_0_control_slave_agent:rp_valid -> router_001:sink_valid
	wire  [108:0] sysid_qsys_0_control_slave_agent_rp_data;                             // sysid_qsys_0_control_slave_agent:rp_data -> router_001:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                            // router_001:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                    // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                      // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          pcie_ram_s1_agent_rp_valid;                                           // pcie_ram_s1_agent:rp_valid -> router_002:sink_valid
	wire  [216:0] pcie_ram_s1_agent_rp_data;                                            // pcie_ram_s1_agent:rp_data -> router_002:sink_data
	wire          pcie_ram_s1_agent_rp_ready;                                           // router_002:sink_ready -> pcie_ram_s1_agent:rp_ready
	wire          pcie_ram_s1_agent_rp_startofpacket;                                   // pcie_ram_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          pcie_ram_s1_agent_rp_endofpacket;                                     // pcie_ram_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> pcie_hip_Rxm_BAR0_limiter:cmd_sink_valid
	wire  [144:0] router_src_data;                                                      // router:src_data -> pcie_hip_Rxm_BAR0_limiter:cmd_sink_data
	wire          router_src_ready;                                                     // pcie_hip_Rxm_BAR0_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                   // router:src_channel -> pcie_hip_Rxm_BAR0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> pcie_hip_Rxm_BAR0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> pcie_hip_Rxm_BAR0_limiter:cmd_sink_endofpacket
	wire  [144:0] pcie_hip_rxm_bar0_limiter_cmd_src_data;                               // pcie_hip_Rxm_BAR0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          pcie_hip_rxm_bar0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> pcie_hip_Rxm_BAR0_limiter:cmd_src_ready
	wire    [1:0] pcie_hip_rxm_bar0_limiter_cmd_src_channel;                            // pcie_hip_Rxm_BAR0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          pcie_hip_rxm_bar0_limiter_cmd_src_startofpacket;                      // pcie_hip_Rxm_BAR0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          pcie_hip_rxm_bar0_limiter_cmd_src_endofpacket;                        // pcie_hip_Rxm_BAR0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> pcie_hip_Rxm_BAR0_limiter:rsp_sink_valid
	wire  [144:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> pcie_hip_Rxm_BAR0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                    // pcie_hip_Rxm_BAR0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> pcie_hip_Rxm_BAR0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> pcie_hip_Rxm_BAR0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> pcie_hip_Rxm_BAR0_limiter:rsp_sink_endofpacket
	wire          pcie_hip_rxm_bar0_limiter_rsp_src_valid;                              // pcie_hip_Rxm_BAR0_limiter:rsp_src_valid -> pcie_hip_Rxm_BAR0_agent:rp_valid
	wire  [144:0] pcie_hip_rxm_bar0_limiter_rsp_src_data;                               // pcie_hip_Rxm_BAR0_limiter:rsp_src_data -> pcie_hip_Rxm_BAR0_agent:rp_data
	wire          pcie_hip_rxm_bar0_limiter_rsp_src_ready;                              // pcie_hip_Rxm_BAR0_agent:rp_ready -> pcie_hip_Rxm_BAR0_limiter:rsp_src_ready
	wire    [1:0] pcie_hip_rxm_bar0_limiter_rsp_src_channel;                            // pcie_hip_Rxm_BAR0_limiter:rsp_src_channel -> pcie_hip_Rxm_BAR0_agent:rp_channel
	wire          pcie_hip_rxm_bar0_limiter_rsp_src_startofpacket;                      // pcie_hip_Rxm_BAR0_limiter:rsp_src_startofpacket -> pcie_hip_Rxm_BAR0_agent:rp_startofpacket
	wire          pcie_hip_rxm_bar0_limiter_rsp_src_endofpacket;                        // pcie_hip_Rxm_BAR0_limiter:rsp_src_endofpacket -> pcie_hip_Rxm_BAR0_agent:rp_endofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_valid;               // sysid_qsys_0_control_slave_burst_adapter:source0_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [108:0] sysid_qsys_0_control_slave_burst_adapter_source0_data;                // sysid_qsys_0_control_slave_burst_adapter:source0_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_ready;               // sysid_qsys_0_control_slave_agent:cp_ready -> sysid_qsys_0_control_slave_burst_adapter:source0_ready
	wire    [1:0] sysid_qsys_0_control_slave_burst_adapter_source0_channel;             // sysid_qsys_0_control_slave_burst_adapter:source0_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket;       // sysid_qsys_0_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket;         // sysid_qsys_0_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          pcie_ram_s1_burst_adapter_source0_valid;                              // pcie_ram_s1_burst_adapter:source0_valid -> pcie_ram_s1_agent:cp_valid
	wire  [216:0] pcie_ram_s1_burst_adapter_source0_data;                               // pcie_ram_s1_burst_adapter:source0_data -> pcie_ram_s1_agent:cp_data
	wire          pcie_ram_s1_burst_adapter_source0_ready;                              // pcie_ram_s1_agent:cp_ready -> pcie_ram_s1_burst_adapter:source0_ready
	wire    [1:0] pcie_ram_s1_burst_adapter_source0_channel;                            // pcie_ram_s1_burst_adapter:source0_channel -> pcie_ram_s1_agent:cp_channel
	wire          pcie_ram_s1_burst_adapter_source0_startofpacket;                      // pcie_ram_s1_burst_adapter:source0_startofpacket -> pcie_ram_s1_agent:cp_startofpacket
	wire          pcie_ram_s1_burst_adapter_source0_endofpacket;                        // pcie_ram_s1_burst_adapter:source0_endofpacket -> pcie_ram_s1_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [144:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [144:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> sysid_qsys_0_control_slave_rsp_width_adapter:in_valid
	wire  [108:0] router_001_src_data;                                                  // router_001:src_data -> sysid_qsys_0_control_slave_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                 // sysid_qsys_0_control_slave_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                               // router_001:src_channel -> sysid_qsys_0_control_slave_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> sysid_qsys_0_control_slave_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> sysid_qsys_0_control_slave_rsp_width_adapter:in_endofpacket
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_valid;               // sysid_qsys_0_control_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [144:0] sysid_qsys_0_control_slave_rsp_width_adapter_src_data;                // sysid_qsys_0_control_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_ready;               // rsp_demux:sink_ready -> sysid_qsys_0_control_slave_rsp_width_adapter:out_ready
	wire    [1:0] sysid_qsys_0_control_slave_rsp_width_adapter_src_channel;             // sysid_qsys_0_control_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_startofpacket;       // sysid_qsys_0_control_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_endofpacket;         // sysid_qsys_0_control_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                 // router_002:src_valid -> pcie_ram_s1_rsp_width_adapter:in_valid
	wire  [216:0] router_002_src_data;                                                  // router_002:src_data -> pcie_ram_s1_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                 // pcie_ram_s1_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                               // router_002:src_channel -> pcie_ram_s1_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                         // router_002:src_startofpacket -> pcie_ram_s1_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                           // router_002:src_endofpacket -> pcie_ram_s1_rsp_width_adapter:in_endofpacket
	wire          pcie_ram_s1_rsp_width_adapter_src_valid;                              // pcie_ram_s1_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [144:0] pcie_ram_s1_rsp_width_adapter_src_data;                               // pcie_ram_s1_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          pcie_ram_s1_rsp_width_adapter_src_ready;                              // rsp_demux_001:sink_ready -> pcie_ram_s1_rsp_width_adapter:out_ready
	wire    [1:0] pcie_ram_s1_rsp_width_adapter_src_channel;                            // pcie_ram_s1_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          pcie_ram_s1_rsp_width_adapter_src_startofpacket;                      // pcie_ram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          pcie_ram_s1_rsp_width_adapter_src_endofpacket;                        // pcie_ram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> sysid_qsys_0_control_slave_cmd_width_adapter:in_valid
	wire  [144:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> sysid_qsys_0_control_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                    // sysid_qsys_0_control_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> sysid_qsys_0_control_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> sysid_qsys_0_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> sysid_qsys_0_control_slave_cmd_width_adapter:in_endofpacket
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_valid;               // sysid_qsys_0_control_slave_cmd_width_adapter:out_valid -> sysid_qsys_0_control_slave_burst_adapter:sink0_valid
	wire  [108:0] sysid_qsys_0_control_slave_cmd_width_adapter_src_data;                // sysid_qsys_0_control_slave_cmd_width_adapter:out_data -> sysid_qsys_0_control_slave_burst_adapter:sink0_data
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_ready;               // sysid_qsys_0_control_slave_burst_adapter:sink0_ready -> sysid_qsys_0_control_slave_cmd_width_adapter:out_ready
	wire    [1:0] sysid_qsys_0_control_slave_cmd_width_adapter_src_channel;             // sysid_qsys_0_control_slave_cmd_width_adapter:out_channel -> sysid_qsys_0_control_slave_burst_adapter:sink0_channel
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_startofpacket;       // sysid_qsys_0_control_slave_cmd_width_adapter:out_startofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_startofpacket
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_endofpacket;         // sysid_qsys_0_control_slave_cmd_width_adapter:out_endofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> pcie_ram_s1_cmd_width_adapter:in_valid
	wire  [144:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> pcie_ram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                // pcie_ram_s1_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> pcie_ram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> pcie_ram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> pcie_ram_s1_cmd_width_adapter:in_endofpacket
	wire          pcie_ram_s1_cmd_width_adapter_src_valid;                              // pcie_ram_s1_cmd_width_adapter:out_valid -> pcie_ram_s1_burst_adapter:sink0_valid
	wire  [216:0] pcie_ram_s1_cmd_width_adapter_src_data;                               // pcie_ram_s1_cmd_width_adapter:out_data -> pcie_ram_s1_burst_adapter:sink0_data
	wire          pcie_ram_s1_cmd_width_adapter_src_ready;                              // pcie_ram_s1_burst_adapter:sink0_ready -> pcie_ram_s1_cmd_width_adapter:out_ready
	wire    [1:0] pcie_ram_s1_cmd_width_adapter_src_channel;                            // pcie_ram_s1_cmd_width_adapter:out_channel -> pcie_ram_s1_burst_adapter:sink0_channel
	wire          pcie_ram_s1_cmd_width_adapter_src_startofpacket;                      // pcie_ram_s1_cmd_width_adapter:out_startofpacket -> pcie_ram_s1_burst_adapter:sink0_startofpacket
	wire          pcie_ram_s1_cmd_width_adapter_src_endofpacket;                        // pcie_ram_s1_cmd_width_adapter:out_endofpacket -> pcie_ram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> crosser:in_valid
	wire  [144:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                 // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                    // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [144:0] crosser_out_data;                                                     // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                    // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                                  // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                            // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                              // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [144:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                                 // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [144:0] crosser_001_out_data;                                                 // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                                // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                              // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                        // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                          // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire    [1:0] pcie_hip_rxm_bar0_limiter_cmd_valid_data;                             // pcie_hip_Rxm_BAR0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid;                // sysid_qsys_0_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_out_data;                 // sysid_qsys_0_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready;                // avalon_st_adapter:in_0_ready -> sysid_qsys_0_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                        // avalon_st_adapter:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                         // avalon_st_adapter:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                        // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                        // avalon_st_adapter:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          pcie_ram_s1_agent_rdata_fifo_out_valid;                               // pcie_ram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [129:0] pcie_ram_s1_agent_rdata_fifo_out_data;                                // pcie_ram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          pcie_ram_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_001:in_0_ready -> pcie_ram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                    // avalon_st_adapter_001:out_0_valid -> pcie_ram_s1_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_001_out_0_data;                                     // avalon_st_adapter_001:out_0_data -> pcie_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                    // pcie_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                    // avalon_st_adapter_001:out_0_error -> pcie_ram_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (7),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcie_hip_rxm_bar0_translator (
		.clk                    (pcie_hip_coreclkout_clk),                                              //                       clk.clk
		.reset                  (pcie_ram_reset1_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pcie_hip_Rxm_BAR0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pcie_hip_Rxm_BAR0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pcie_hip_Rxm_BAR0_burstcount),                                         //                          .burstcount
		.av_byteenable          (pcie_hip_Rxm_BAR0_byteenable),                                         //                          .byteenable
		.av_read                (pcie_hip_Rxm_BAR0_read),                                               //                          .read
		.av_readdata            (pcie_hip_Rxm_BAR0_readdata),                                           //                          .readdata
		.av_readdatavalid       (pcie_hip_Rxm_BAR0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pcie_hip_Rxm_BAR0_write),                                              //                          .write
		.av_writedata           (pcie_hip_Rxm_BAR0_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clk_125_clk_clk),                                   //                      clk.clk
		.reset                  (sysid_qsys_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pcie_ram_s1_translator (
		.clk                    (pcie_hip_coreclkout_clk),                     //                      clk.clk
		.reset                  (pcie_ram_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pcie_ram_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (pcie_ram_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (pcie_ram_s1_agent_m0_read),                   //                         .read
		.uav_write              (pcie_ram_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (pcie_ram_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (pcie_ram_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (pcie_ram_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (pcie_ram_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (pcie_ram_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (pcie_ram_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (pcie_ram_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (pcie_ram_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (pcie_ram_s1_write),                           //                         .write
		.av_readdata            (pcie_ram_s1_readdata),                        //                         .readdata
		.av_writedata           (pcie_ram_s1_writedata),                       //                         .writedata
		.av_byteenable          (pcie_ram_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (pcie_ram_s1_chipselect),                      //                         .chipselect
		.av_clken               (pcie_ram_s1_clken),                           //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_CACHE_H               (139),
		.PKT_CACHE_L               (136),
		.PKT_THREAD_ID_H           (132),
		.PKT_THREAD_ID_L           (132),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (128),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (130),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (131),
		.ST_DATA_W                 (145),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_hip_rxm_bar0_agent (
		.clk                   (pcie_hip_coreclkout_clk),                                              //       clk.clk
		.reset                 (pcie_ram_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pcie_hip_rxm_bar0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pcie_hip_rxm_bar0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pcie_hip_rxm_bar0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pcie_hip_rxm_bar0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pcie_hip_rxm_bar0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pcie_hip_rxm_bar0_agent_cp_ready),                                     //          .ready
		.rp_valid              (pcie_hip_rxm_bar0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (pcie_hip_rxm_bar0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (pcie_hip_rxm_bar0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (pcie_hip_rxm_bar0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (pcie_hip_rxm_bar0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (pcie_hip_rxm_bar0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clk_125_clk_clk),                                                //             clk.clk
		.reset                   (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_0_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                             //       clk.clk
		.reset             (sysid_qsys_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                       //       clk.clk
		.reset             (sysid_qsys_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (216),
		.PKT_ORI_BURST_SIZE_L      (214),
		.PKT_RESPONSE_STATUS_H     (213),
		.PKT_RESPONSE_STATUS_L     (212),
		.PKT_BURST_SIZE_H          (195),
		.PKT_BURST_SIZE_L          (193),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (200),
		.PKT_PROTECTION_H          (207),
		.PKT_PROTECTION_L          (205),
		.PKT_BURSTWRAP_H           (192),
		.PKT_BURSTWRAP_L           (192),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (202),
		.PKT_SRC_ID_L              (202),
		.PKT_DEST_ID_H             (203),
		.PKT_DEST_ID_L             (203),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (217),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pcie_ram_s1_agent (
		.clk                     (pcie_hip_coreclkout_clk),                         //             clk.clk
		.reset                   (pcie_ram_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (pcie_ram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pcie_ram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pcie_ram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pcie_ram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pcie_ram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pcie_ram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pcie_ram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pcie_ram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pcie_ram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pcie_ram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pcie_ram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pcie_ram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pcie_ram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pcie_ram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pcie_ram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pcie_ram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pcie_ram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pcie_ram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pcie_ram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pcie_ram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pcie_ram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pcie_ram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pcie_ram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pcie_ram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pcie_ram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pcie_ram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pcie_ram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pcie_ram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pcie_ram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pcie_ram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pcie_ram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pcie_ram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pcie_ram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_ram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pcie_ram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (218),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_ram_s1_agent_rsp_fifo (
		.clk               (pcie_hip_coreclkout_clk),                      //       clk.clk
		.reset             (pcie_ram_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pcie_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pcie_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pcie_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pcie_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pcie_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pcie_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pcie_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pcie_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pcie_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pcie_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_ram_s1_agent_rdata_fifo (
		.clk               (pcie_hip_coreclkout_clk),                     //       clk.clk
		.reset             (pcie_ram_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcie_ram_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (pcie_ram_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (pcie_ram_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (pcie_ram_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (pcie_ram_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (pcie_ram_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	pcie2ram_mm_interconnect_0_router router (
		.sink_ready         (pcie_hip_rxm_bar0_agent_cp_ready),            //      sink.ready
		.sink_valid         (pcie_hip_rxm_bar0_agent_cp_valid),            //          .valid
		.sink_data          (pcie_hip_rxm_bar0_agent_cp_data),             //          .data
		.sink_startofpacket (pcie_hip_rxm_bar0_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (pcie_hip_rxm_bar0_agent_cp_endofpacket),      //          .endofpacket
		.clk                (pcie_hip_coreclkout_clk),                     //       clk.clk
		.reset              (pcie_ram_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                            //       src.ready
		.src_valid          (router_src_valid),                            //          .valid
		.src_data           (router_src_data),                             //          .data
		.src_channel        (router_src_channel),                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                       //          .endofpacket
	);

	pcie2ram_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                                   //       clk.clk
		.reset              (sysid_qsys_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_001_src_ready),                              //       src.ready
		.src_valid          (router_001_src_valid),                              //          .valid
		.src_data           (router_001_src_data),                               //          .data
		.src_channel        (router_001_src_channel),                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                         //          .endofpacket
	);

	pcie2ram_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (pcie_ram_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pcie_ram_s1_agent_rp_valid),                  //          .valid
		.sink_data          (pcie_ram_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (pcie_ram_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pcie_ram_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (pcie_hip_coreclkout_clk),                     //       clk.clk
		.reset              (pcie_ram_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                        //       src.ready
		.src_valid          (router_002_src_valid),                        //          .valid
		.src_data           (router_002_src_data),                         //          .data
		.src_channel        (router_002_src_channel),                      //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (131),
		.PKT_SRC_ID_H              (130),
		.PKT_SRC_ID_L              (130),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (145),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pcie_hip_rxm_bar0_limiter (
		.clk                    (pcie_hip_coreclkout_clk),                         //       clk.clk
		.reset                  (pcie_ram_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                //          .valid
		.cmd_sink_data          (router_src_data),                                 //          .data
		.cmd_sink_channel       (router_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (pcie_hip_rxm_bar0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (pcie_hip_rxm_bar0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (pcie_hip_rxm_bar0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (pcie_hip_rxm_bar0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (pcie_hip_rxm_bar0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (pcie_hip_rxm_bar0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (pcie_hip_rxm_bar0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (pcie_hip_rxm_bar0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (pcie_hip_rxm_bar0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (pcie_hip_rxm_bar0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (pcie_hip_rxm_bar0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (pcie_hip_rxm_bar0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_0_control_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                                //       cr0.clk
		.reset                 (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (sysid_qsys_0_control_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sysid_qsys_0_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sysid_qsys_0_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sysid_qsys_0_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sysid_qsys_0_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sysid_qsys_0_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_0_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (200),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (195),
		.PKT_BURST_SIZE_L          (193),
		.PKT_BURST_TYPE_H          (197),
		.PKT_BURST_TYPE_L          (196),
		.PKT_BURSTWRAP_H           (192),
		.PKT_BURSTWRAP_L           (192),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (217),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (192),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pcie_ram_s1_burst_adapter (
		.clk                   (pcie_hip_coreclkout_clk),                         //       cr0.clk
		.reset                 (pcie_ram_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (pcie_ram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (pcie_ram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (pcie_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (pcie_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (pcie_ram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (pcie_ram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (pcie_ram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pcie_ram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pcie_ram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pcie_ram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pcie_ram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pcie_ram_s1_burst_adapter_source0_ready)          //          .ready
	);

	pcie2ram_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pcie_hip_coreclkout_clk),                         //        clk.clk
		.reset              (pcie_ram_reset1_reset_bridge_in_reset_reset),     //  clk_reset.reset
		.sink_ready         (pcie_hip_rxm_bar0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (pcie_hip_rxm_bar0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (pcie_hip_rxm_bar0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (pcie_hip_rxm_bar0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (pcie_hip_rxm_bar0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (pcie_hip_rxm_bar0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //           .valid
		.src0_data          (cmd_demux_src0_data),                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                            //           .valid
		.src1_data          (cmd_demux_src1_data),                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                       //           .endofpacket
	);

	pcie2ram_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_125_clk_clk),                                //       clk.clk
		.reset               (sysid_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_out_ready),                              //     sink0.ready
		.sink0_valid         (crosser_out_valid),                              //          .valid
		.sink0_channel       (crosser_out_channel),                            //          .channel
		.sink0_data          (crosser_out_data),                               //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                         //          .endofpacket
	);

	pcie2ram_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pcie_hip_coreclkout_clk),                     //       clk.clk
		.reset               (pcie_ram_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                   //          .endofpacket
	);

	pcie2ram_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_125_clk_clk),                                                //       clk.clk
		.reset              (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.sink_ready         (sysid_qsys_0_control_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sysid_qsys_0_control_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sysid_qsys_0_control_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sysid_qsys_0_control_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                      //          .endofpacket
	);

	pcie2ram_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (pcie_hip_coreclkout_clk),                         //       clk.clk
		.reset              (pcie_ram_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (pcie_ram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (pcie_ram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (pcie_ram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (pcie_ram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (pcie_ram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (pcie_ram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                   //          .endofpacket
	);

	pcie2ram_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pcie_hip_coreclkout_clk),                     //       clk.clk
		.reset               (pcie_ram_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                       //          .valid
		.sink0_channel       (crosser_001_out_channel),                     //          .channel
		.sink0_data          (crosser_001_out_data),                        //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sysid_qsys_0_control_slave_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                                //       clk.clk
		.reset                (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (router_001_src_valid),                                           //      sink.valid
		.in_channel           (router_001_src_channel),                                         //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_001_src_ready),                                           //          .ready
		.in_data              (router_001_src_data),                                            //          .data
		.out_endofpacket      (sysid_qsys_0_control_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sysid_qsys_0_control_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sysid_qsys_0_control_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sysid_qsys_0_control_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sysid_qsys_0_control_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sysid_qsys_0_control_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (191),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (192),
		.IN_PKT_BURSTWRAP_L            (192),
		.IN_PKT_BURST_SIZE_H           (195),
		.IN_PKT_BURST_SIZE_L           (193),
		.IN_PKT_RESPONSE_STATUS_H      (213),
		.IN_PKT_RESPONSE_STATUS_L      (212),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (197),
		.IN_PKT_BURST_TYPE_L           (196),
		.IN_PKT_ORI_BURST_SIZE_L       (214),
		.IN_PKT_ORI_BURST_SIZE_H       (216),
		.IN_ST_DATA_W                  (217),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ram_s1_rsp_width_adapter (
		.clk                  (pcie_hip_coreclkout_clk),                         //       clk.clk
		.reset                (pcie_ram_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_002_src_valid),                            //      sink.valid
		.in_channel           (router_002_src_channel),                          //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                      //          .endofpacket
		.in_ready             (router_002_src_ready),                            //          .ready
		.in_data              (router_002_src_data),                             //          .data
		.out_endofpacket      (pcie_ram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sysid_qsys_0_control_slave_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                                //       clk.clk
		.reset                (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                              //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                            //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                              //          .ready
		.in_data              (cmd_mux_src_data),                                               //          .data
		.out_endofpacket      (sysid_qsys_0_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sysid_qsys_0_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sysid_qsys_0_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sysid_qsys_0_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sysid_qsys_0_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sysid_qsys_0_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (191),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (195),
		.OUT_PKT_BURST_SIZE_L          (193),
		.OUT_PKT_RESPONSE_STATUS_H     (213),
		.OUT_PKT_RESPONSE_STATUS_L     (212),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (197),
		.OUT_PKT_BURST_TYPE_L          (196),
		.OUT_PKT_ORI_BURST_SIZE_L      (214),
		.OUT_PKT_ORI_BURST_SIZE_H      (216),
		.OUT_ST_DATA_W                 (217),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ram_s1_cmd_width_adapter (
		.clk                  (pcie_hip_coreclkout_clk),                         //       clk.clk
		.reset                (pcie_ram_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                           //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                         //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                     //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                           //          .ready
		.in_data              (cmd_mux_001_src_data),                            //          .data
		.out_endofpacket      (pcie_ram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (145),
		.BITS_PER_SYMBOL     (145),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pcie_hip_coreclkout_clk),                        //        in_clk.clk
		.in_reset          (pcie_ram_reset1_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (clk_125_clk_clk),                                //       out_clk.clk
		.out_reset         (sysid_qsys_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                           //            in.ready
		.in_valid          (cmd_demux_src0_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                         //              .channel
		.in_data           (cmd_demux_src0_data),                            //              .data
		.out_ready         (crosser_out_ready),                              //           out.ready
		.out_valid         (crosser_out_valid),                              //              .valid
		.out_startofpacket (crosser_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_out_channel),                            //              .channel
		.out_data          (crosser_out_data),                               //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (145),
		.BITS_PER_SYMBOL     (145),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_125_clk_clk),                                //        in_clk.clk
		.in_reset          (sysid_qsys_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pcie_hip_coreclkout_clk),                        //       out_clk.clk
		.out_reset         (pcie_ram_reset1_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                           //            in.ready
		.in_valid          (rsp_demux_src0_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                         //              .channel
		.in_data           (rsp_demux_src0_data),                            //              .data
		.out_ready         (crosser_001_out_ready),                          //           out.ready
		.out_valid         (crosser_001_out_valid),                          //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_001_out_channel),                        //              .channel
		.out_data          (crosser_001_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	pcie2ram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_125_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                          //         .error
	);

	pcie2ram_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pcie_hip_coreclkout_clk),                     // in_clk_0.clk
		.in_rst_0_reset (pcie_ram_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pcie_ram_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (pcie_ram_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (pcie_ram_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)            //         .error
	);

endmodule
